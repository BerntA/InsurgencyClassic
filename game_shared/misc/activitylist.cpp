//========= Copyright © 1996-2005, Valve Corporation, All rights reserved. ============//
//
// Purpose: 
//
// $NoKeywords: $
//
//=============================================================================//
#include "cbase.h"
#include "ai_activity.h"
#include "activitylist.h"
#include "stringregistry.h"
#include "isaverestore.h"

// memdbgon must be the last include file in a .cpp file!!!
#include "tier0/memdbgon.h"

// NOTE: If CStringRegistry allowed storing arbitrary data, we could just use that.
// in this case we have the "isPrivate" member and the replacement rules 
// (activityIndex can be reused by private activities), so a custom table is necessary
struct activitylist_t
{
	int					activityIndex;
	unsigned short		stringKey;
	short				isPrivate;
};

CUtlVector<activitylist_t> g_ActivityList;

// This stores the actual activity names.  Also, the string ID in the registry is simply an index 
// into the g_ActivityList array.
CStringRegistry	g_ActivityStrings;

// this is just here to accelerate adds
static int g_HighestActivity = 0;

int g_nActivityListVersion = 1;


void ActivityList_Init( void )
{
	g_HighestActivity = 0;
}

void ActivityList_Free( void )
{
	g_ActivityStrings.ClearStrings();
	g_ActivityList.Purge();

	// So studiohdrs can reindex activity indices
	++g_nActivityListVersion;
}

// add a new activity to the database
activitylist_t *ActivityList_AddActivityEntry( const char *pName, int iActivityIndex, bool isPrivate )
{
	int index = g_ActivityList.AddToTail();
	activitylist_t *pList = &g_ActivityList[index];
	pList->activityIndex = iActivityIndex;
	pList->stringKey = g_ActivityStrings.AddString( pName, index );
	pList->isPrivate = isPrivate;
	
	// UNDONE: This implies that ALL shared activities are added before ANY custom activities
	// UNDONE: Segment these instead?  It's a 32-bit int, how many activities do we need?
	if ( iActivityIndex > g_HighestActivity )
	{
		g_HighestActivity = iActivityIndex;
	}

	return pList;
}

// get the database entry from a string
static activitylist_t *ListFromString( const char *pString )
{
	// just use the string registry to do this search/map
	int stringID = g_ActivityStrings.GetStringID( pString );
	if ( stringID < 0 )
		return NULL;

	return &g_ActivityList[stringID];
}

// Get the database entry for an index
static activitylist_t *ListFromActivity( int activityIndex )
{
	// ugly linear search
	for ( int i = 0; i < g_ActivityList.Size(); i++ )
	{
		if ( g_ActivityList[i].activityIndex == activityIndex )
		{
			return &g_ActivityList[i];
		}
	}

	return NULL;
}

bool ActivityList_RegisterSharedActivity( const char *pszActivityName, int iActivityIndex )
{
	// UNDONE: Do we want to do these checks when not in developer mode? or maybe DEBUG only?
	// They really only matter when you change the list of code controlled activities.  IDs
	// for content controlled activities never collide because they are generated.

	// technically order isn't dependent, but it's too damn easy to forget to add new ACT_'s to all three lists.
	static int lastActivityIndex = -1;
	Assert( iActivityIndex < LAST_SHARED_ACTIVITY && (iActivityIndex == lastActivityIndex + 1 || iActivityIndex == 0) );
	lastActivityIndex = iActivityIndex;

	// first, check to make sure the slot we're asking for is free. It must be for 
	// a shared activity.
	activitylist_t *pList = ListFromString( pszActivityName );
	if ( !pList )
	{
		pList = ListFromActivity( iActivityIndex );
	}

	if ( pList )
	{
		Warning( "***\nShared activity collision! %s<->%s\n***\n", pszActivityName, g_ActivityStrings.GetStringForKey( pList->stringKey ) );
		Assert(0);
		return false;
	}
	// ----------------------------------------------------------------

	ActivityList_AddActivityEntry( pszActivityName, iActivityIndex, false );
	return true;
}


Activity ActivityList_RegisterPrivateActivity( const char *pszActivityName )
{
	activitylist_t *pList = ListFromString( pszActivityName );
	if ( pList )
	{
		// this activity is already in the list. If the activity we collided with is also private, 
		// then the collision is OK. Otherwise, it's a bug.
		if ( pList->isPrivate )
		{
			return (Activity)pList->activityIndex;
		}
		else
		{
			// this private activity collides with a shared activity. That is not allowed.
			Warning( "***\nShared<->Private Activity collision!\n***\n" );
			Assert(0);
			return ACT_INVALID;
		}
	}

	pList = ActivityList_AddActivityEntry( pszActivityName, g_HighestActivity+1, true );
	return (Activity)pList->activityIndex;
}

// Get the index for a given activity name
// Done at load time for all models
int ActivityList_IndexForName( const char *pszActivityName )
{
	// this is a fast O(lgn) search (actually does 2 O(lgn) searches)
	activitylist_t *pList = ListFromString( pszActivityName );

	if ( pList )
	{
		return pList->activityIndex;
	}

	return -1;
}

// Get the name for a given index
// This should only be used in debug code, it does a linear search
// But at least it only compares integers
const char *ActivityList_NameForIndex( int activityIndex )
{
	activitylist_t *pList = ListFromActivity( activityIndex );
	if ( pList )
	{
		return g_ActivityStrings.GetStringForKey( pList->stringKey );
	}
	return NULL;
}

// Pongles, xENO, deathz0rz [

void ActivityList_RegisterSharedActivities( void )
{
	REGISTER_SHARED_ACTIVITY( ACT_RESET );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_TRANSITION );
	REGISTER_SHARED_ACTIVITY( ACT_COVER );
	REGISTER_SHARED_ACTIVITY( ACT_COVER_MED );
	REGISTER_SHARED_ACTIVITY( ACT_COVER_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_WALK );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_CROUCH );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_CROUCH_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_RUN );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_CROUCH );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_CROUCH_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_PROTECTED );
	REGISTER_SHARED_ACTIVITY( ACT_SCRIPT_CUSTOM_MOVE );
	REGISTER_SHARED_ACTIVITY( ACT_RANGE_ATTACK1 );
	REGISTER_SHARED_ACTIVITY( ACT_RANGE_ATTACK2 );
	REGISTER_SHARED_ACTIVITY( ACT_RANGE_ATTACK1_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_RANGE_ATTACK2_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_DIESIMPLE );
	REGISTER_SHARED_ACTIVITY( ACT_DIEBACKWARD );
	REGISTER_SHARED_ACTIVITY( ACT_DIEFORWARD );
	REGISTER_SHARED_ACTIVITY( ACT_DIEVIOLENT );
	REGISTER_SHARED_ACTIVITY( ACT_DIERAGDOLL );
	REGISTER_SHARED_ACTIVITY( ACT_FLY );
	REGISTER_SHARED_ACTIVITY( ACT_HOVER );
	REGISTER_SHARED_ACTIVITY( ACT_GLIDE );
	REGISTER_SHARED_ACTIVITY( ACT_SWIM );
	REGISTER_SHARED_ACTIVITY( ACT_JUMP );
	REGISTER_SHARED_ACTIVITY( ACT_HOP );
	REGISTER_SHARED_ACTIVITY( ACT_LEAP );
	REGISTER_SHARED_ACTIVITY( ACT_LAND );
	REGISTER_SHARED_ACTIVITY( ACT_CLIMB_UP );
	REGISTER_SHARED_ACTIVITY( ACT_CLIMB_DOWN );
	REGISTER_SHARED_ACTIVITY( ACT_CLIMB_DISMOUNT );
	REGISTER_SHARED_ACTIVITY( ACT_SHIPLADDER_UP );
	REGISTER_SHARED_ACTIVITY( ACT_SHIPLADDER_DOWN );
	REGISTER_SHARED_ACTIVITY( ACT_STRAFE_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_STRAFE_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_ROLL_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_ROLL_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_TURN_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_TURN_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_CROUCH );
	REGISTER_SHARED_ACTIVITY( ACT_CROUCHIDLE );
	REGISTER_SHARED_ACTIVITY( ACT_STAND );
	REGISTER_SHARED_ACTIVITY( ACT_USE );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL1 );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL2 );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL3 );

	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_ADVANCE );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_FORWARD );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_GROUP );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_HALT );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_SIGNAL_TAKECOVER );

	REGISTER_SHARED_ACTIVITY( ACT_LOOKBACK_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_LOOKBACK_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_COWER );
	REGISTER_SHARED_ACTIVITY( ACT_SMALL_FLINCH );
	REGISTER_SHARED_ACTIVITY( ACT_BIG_FLINCH );
	REGISTER_SHARED_ACTIVITY( ACT_MELEE_ATTACK1 );
	REGISTER_SHARED_ACTIVITY( ACT_MELEE_ATTACK2 );
	REGISTER_SHARED_ACTIVITY( ACT_RELOAD );
	REGISTER_SHARED_ACTIVITY( ACT_RELOAD_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_ARM );
	REGISTER_SHARED_ACTIVITY( ACT_DISARM );
	REGISTER_SHARED_ACTIVITY( ACT_PICKUP_GROUND );
	REGISTER_SHARED_ACTIVITY( ACT_PICKUP_RACK );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_ANGRY );

	REGISTER_SHARED_ACTIVITY( ACT_IDLE_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_WALK_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_RUN_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_IDLE_AIM_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_AIM_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_AIM_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_WALK_AIM_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_AIM_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_AIM_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_RUN_AIM_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_AIM_STIMULATED );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_AIM_AGITATED );

	REGISTER_SHARED_ACTIVITY( ACT_WALK_HURT );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_HURT );
	REGISTER_SHARED_ACTIVITY( ACT_SPECIAL_ATTACK1 );
	REGISTER_SHARED_ACTIVITY( ACT_SPECIAL_ATTACK2 );
	REGISTER_SHARED_ACTIVITY( ACT_COMBAT_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_SCARED );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_SCARED );
	REGISTER_SHARED_ACTIVITY( ACT_VICTORY_DANCE );
	
	REGISTER_SHARED_ACTIVITY( ACT_DIE_HEADSHOT );
	REGISTER_SHARED_ACTIVITY( ACT_DIE_CHESTSHOT );
	REGISTER_SHARED_ACTIVITY( ACT_DIE_GUTSHOT );
	REGISTER_SHARED_ACTIVITY( ACT_DIE_BACKSHOT );

	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_HEAD );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_CHEST );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_STOMACH );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_LEFTARM );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_RIGHTARM );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_LEFTLEG );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_RIGHTLEG );
	REGISTER_SHARED_ACTIVITY( ACT_FLINCH_PHYSICS );

	REGISTER_SHARED_ACTIVITY( ACT_IDLE_ON_FIRE );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_ON_FIRE );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_ON_FIRE );

	REGISTER_SHARED_ACTIVITY( ACT_RAPPEL_LOOP );

	REGISTER_SHARED_ACTIVITY( ACT_180_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_180_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_90_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_90_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_STEP_LEFT );			
	REGISTER_SHARED_ACTIVITY( ACT_STEP_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_STEP_BACK );
	REGISTER_SHARED_ACTIVITY( ACT_STEP_FORE );

	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_RANGE_ATTACK1 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_RANGE_ATTACK2 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_MELEE_ATTACK1 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_MELEE_ATTACK2 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_RANGE_ATTACK1_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_RANGE_ATTACK2_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_MELEE_ATTACK_SWING_GESTURE );
	
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_SMALL_FLINCH );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_BIG_FLINCH );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_BLAST );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_HEAD );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_CHEST );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_STOMACH );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_LEFTARM );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_RIGHTARM );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_LEFTLEG );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_FLINCH_RIGHTLEG );

	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_LEFT );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_RIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_LEFT45 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_RIGHT45 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_LEFT90 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_RIGHT90 );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_LEFT45_FLAT );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_RIGHT45_FLAT );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_LEFT90_FLAT );
	REGISTER_SHARED_ACTIVITY( ACT_GESTURE_TURN_RIGHT90_FLAT );

	REGISTER_SHARED_ACTIVITY( ACT_DO_NOT_DISTURB );

	// viewmodel activities may belong elsewhere, but since where is unclear right now,
	// they'll be placed here.
	REGISTER_SHARED_ACTIVITY( ACT_VM_DRAW );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HOLSTER );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_FIDGET );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PULLBACK );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PULLBACK_HIGH );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PULLBACK_LOW );
	REGISTER_SHARED_ACTIVITY( ACT_VM_THROW );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PULLPIN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PRIMARYATTACK );
	REGISTER_SHARED_ACTIVITY( ACT_VM_SECONDARYATTACK );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DRYFIRE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITLEFT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITLEFT2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITRIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITRIGHT2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITCENTER );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HITCENTER2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSLEFT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSLEFT2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSRIGHT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSRIGHT2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSCENTER );
	REGISTER_SHARED_ACTIVITY( ACT_VM_MISSCENTER2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HAULBACK );
	REGISTER_SHARED_ACTIVITY( ACT_VM_SWINGHARD );
	REGISTER_SHARED_ACTIVITY( ACT_VM_SWINGMISS );
	REGISTER_SHARED_ACTIVITY( ACT_VM_SWINGHIT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IDLE_TO_LOWERED );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IDLE_LOWERED );
	REGISTER_SHARED_ACTIVITY( ACT_VM_LOWERED_TO_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RECOIL1 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RECOIL2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RECOIL3 );

	//===========================
	// Misc Specific Activities
	//===========================
	REGISTER_SHARED_ACTIVITY( ACT_RUNTOIDLE );

	REGISTER_SHARED_ACTIVITY( ACT_PHYSCANNON_DETACH );
	REGISTER_SHARED_ACTIVITY( ACT_PHYSCANNON_ANIMATE );
	REGISTER_SHARED_ACTIVITY( ACT_PHYSCANNON_ANIMATE_PRE );
	REGISTER_SHARED_ACTIVITY( ACT_PHYSCANNON_ANIMATE_POST );

	//===========================
	// INS Specific Activities
	//===========================	
	REGISTER_SHARED_ACTIVITY( ACT_VM_FIREMODE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IFIREMODE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DFIREMODE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DIFIREMODE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DRAW_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IDLE_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_TIRED );
	REGISTER_SHARED_ACTIVITY( ACT_VM_TIRED_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DOWN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DOWN_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_CRAWL );
	REGISTER_SHARED_ACTIVITY( ACT_VM_CRAWL_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IOUT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIN_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IOUT_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ISHOOT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IRECOIL1 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IRECOIL2 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOADEMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IRON_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_LIFTED_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IDLE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_OUT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IRON_IN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IRON_OUT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_FIRE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IRON_FIRE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_SHOOTLAST );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ISHOOT_LAST );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ISHOOT_DRY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ISHOOTDRY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_READY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HOLSTER_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIDLE_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ROF_UP );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ROF_DOWN );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_RELOAD );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_RELOAD_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_DRYFIRE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DEPLOYED_IRON_DRYFIRE );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_INSERT );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_INSERT_PULL );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_END );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_END_EMPTY );
	REGISTER_SHARED_ACTIVITY( ACT_VM_PULLBACK_HIGH_BAKE );

	REGISTER_SHARED_ACTIVITY( ACT_VM_DRAW_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DRAWFULL_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_READY_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IDLE_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_DOWN_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_CRAWL_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_RELOAD_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HOLSTER_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_HOLSTERFULL_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIN_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IIDLE_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_IOUT_M203 );
	REGISTER_SHARED_ACTIVITY( ACT_VM_ISHOOT_M203 );

	REGISTER_SHARED_ACTIVITY( ACT_TURN );

    // unmapped activities
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_WALK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_RUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_LEANR );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_LEANL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_AIM );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_WALK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_RUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_LEANR );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_LEANL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP );

    ActivityList_RegisterSharedActivity( "ACT_STAND_TO_CROUCH", ACT_TRANS_STAND_CROUCH );
    ActivityList_RegisterSharedActivity( "ACT_STAND_TO_PRONE",  ACT_TRANS_STAND_PRONE  );
    ActivityList_RegisterSharedActivity( "ACT_CROUCH_TO_STAND", ACT_TRANS_CROUCH_STAND );
    ActivityList_RegisterSharedActivity( "ACT_CROUCH_TO_PRONE", ACT_TRANS_CROUCH_PRONE );
    ActivityList_RegisterSharedActivity( "ACT_PRONE_TO_STAND",  ACT_TRANS_PRONE_STAND  );
    ActivityList_RegisterSharedActivity( "ACT_PRONE_TO_CROUCH", ACT_TRANS_PRONE_CROUCH ); 

	// weapon specific activities: pistol
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_PISTOL", ACT_INS_STAND_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_PISTOL", ACT_INS_STAND_AIM_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_PISTOL", ACT_INS_STAND_WALK_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_PISTOL", ACT_INS_STAND_RUN_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_PISTOL", ACT_INS_STAND_LEANR_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_PISTOL", ACT_INS_STAND_LEANL_PISTOL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_PISTOL )
		ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_PISTOL", ACT_INS_CROUCH_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_PISTOL", ACT_INS_CROUCH_AIM_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_PISTOL", ACT_INS_CROUCH_WALK_PISTOL );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_PISTOL", ACT_INS_CROUCH_RUN_PISTOL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_PISTOL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_PISTOL );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_PISTOL );

	// weapon specific activities: knife
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_KNIFE", ACT_INS_STAND_KNIFE );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_KNIFE", ACT_INS_STAND_WALK_KNIFE );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_KNIFE", ACT_INS_STAND_RUN_KNIFE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_KNIFE );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_KNIFE", ACT_INS_CROUCH_KNIFE );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_KNIFE", ACT_INS_CROUCH_WALK_KNIFE );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_KNIFE", ACT_INS_CROUCH_RUN_KNIFE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_KNIFE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_KNIFE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_KNIFE );

	// weapon specific activities: grenade
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_GRENADE", ACT_INS_STAND_GRENADE );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_GRENADE", ACT_INS_STAND_WALK_GRENADE );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_GRENADE", ACT_INS_STAND_RUN_GRENADE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_GRENADE );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_GRENADE", ACT_INS_CROUCH_GRENADE );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_GRENADE", ACT_INS_CROUCH_WALK_GRENADE );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_GRENADE", ACT_INS_CROUCH_RUN_GRENADE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_GRENADE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_GRENADE );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_GRENADE );

	// weapon specific activities: M16
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_M16", ACT_INS_STAND_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_M16", ACT_INS_STAND_AIM_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_M16", ACT_INS_STAND_WALK_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_M16", ACT_INS_STAND_RUN_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_M16", ACT_INS_STAND_LEANR_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_M16", ACT_INS_STAND_LEANL_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_M16", ACT_INS_CROUCH_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_M16", ACT_INS_CROUCH_AIM_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_M16", ACT_INS_CROUCH_WALK_M16 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_M16", ACT_INS_CROUCH_RUN_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_M16 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_M16 );

	// weapon specific activities: M249
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_M249", ACT_INS_STAND_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_M249", ACT_INS_STAND_AIM_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_M249", ACT_INS_STAND_WALK_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_M249", ACT_INS_STAND_RUN_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_M249", ACT_INS_STAND_LEANR_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_M249", ACT_INS_STAND_LEANL_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_M249", ACT_INS_CROUCH_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_M249", ACT_INS_CROUCH_AIM_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_M249", ACT_INS_CROUCH_WALK_M249 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_M249", ACT_INS_CROUCH_RUN_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_M249 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_M249 );

	// weapon specific activities: RPK
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_RPK", ACT_INS_STAND_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_RPK", ACT_INS_STAND_AIM_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_RPK", ACT_INS_STAND_WALK_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_RPK", ACT_INS_STAND_RUN_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_RPK", ACT_INS_STAND_LEANR_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_RPK", ACT_INS_STAND_LEANL_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_RPK", ACT_INS_CROUCH_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_RPK", ACT_INS_CROUCH_AIM_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_RPK", ACT_INS_CROUCH_WALK_RPK );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_RPK", ACT_INS_CROUCH_RUN_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_RPK );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_RPK );

	// weapon specific activities: SKS
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_SKS", ACT_INS_STAND_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_SKS", ACT_INS_STAND_AIM_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_SKS", ACT_INS_STAND_WALK_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_SKS", ACT_INS_STAND_RUN_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_SKS", ACT_INS_STAND_LEANR_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_SKS", ACT_INS_STAND_LEANL_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_SKS", ACT_INS_CROUCH_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_SKS", ACT_INS_CROUCH_AIM_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_SKS", ACT_INS_CROUCH_WALK_SKS );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_SKS", ACT_INS_CROUCH_RUN_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_SKS );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_SKS );

	// weapon specific activities: AK47
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_AK47", ACT_INS_STAND_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_AK47", ACT_INS_STAND_AIM_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_AK47", ACT_INS_STAND_WALK_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_AK47", ACT_INS_STAND_RUN_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_STAND_DEPLOY_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_AK47", ACT_INS_STAND_LEANR_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_AK47", ACT_INS_STAND_LEANL_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_AK47", ACT_INS_CROUCH_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_AK47", ACT_INS_CROUCH_AIM_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_AK47", ACT_INS_CROUCH_WALK_AK47 );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_AK47", ACT_INS_CROUCH_RUN_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CROUCH_DEPLOY_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_DEPLOY_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_AK47 );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_AK47 );

	// weapon specific activities: shotgun
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_SHOTGUN", ACT_INS_STAND_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_SHOTGUN", ACT_INS_STAND_AIM_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_SHOTGUN", ACT_INS_STAND_WALK_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_SHOTGUN", ACT_INS_STAND_RUN_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANR_SHOTGUN", ACT_INS_STAND_LEANR_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_LEANL_SHOTGUN", ACT_INS_STAND_LEANL_SHOTGUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_SPRINT_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_IDLE_CROUCH_SHOTGUN", ACT_INS_CROUCH_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_AIM_CROUCH_SHOTGUN", ACT_INS_CROUCH_AIM_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_WALK_CROUCH_SHOTGUN", ACT_INS_CROUCH_WALK_SHOTGUN );
	ActivityList_RegisterSharedActivity( "ACT_INS_RUN_CROUCH_SHOTGUN", ACT_INS_CROUCH_RUN_SHOTGUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_PRONE_SHOTGUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_CRAWL_SHOTGUN );
	REGISTER_SHARED_ACTIVITY( ACT_INS_JUMP_SHOTGUN );

	// weapon specific activities: rpg
	REGISTER_SHARED_ACTIVITY( ACT_RANGE_ATTACK_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_RPG_RELAXED );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_ANGRY_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_IDLE_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_WALK_CROUCH_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_SPRINT_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_RUN_CROUCH_RPG );
	REGISTER_SHARED_ACTIVITY( ACT_COVER_LOW_RPG );
}

// Pongles, xENO, deathz0rz ]

// HACKHACK: Keep backwards compatibility on broken activities temporarily
#define ACTIVITY_FILE_TAG 0x80800000

class CActivityDataOps : public CDefSaveRestoreOps
{
public:
	// save data type interface
	virtual void Save( const SaveRestoreFieldInfo_t &fieldInfo, ISave *pSave ) 
	{
		int activityIndex = *((int *)fieldInfo.pField);
		const char *pActivityName = ActivityList_NameForIndex( activityIndex );
		if ( !pActivityName )
		{
			AssertOnce( activityIndex == -1 ); // FIXME: whatever activity this was, it's now being saved out as ACT_RESET
			pActivityName = ActivityList_NameForIndex( 0 );
		}
		int len = strlen(pActivityName) + 1;
		
		// Use the high 16-bits of this int to signify this file format
		// this makes this backwards compatible.
		// UNDONE: Remove after playtest save files are no longer needed
		len |= ACTIVITY_FILE_TAG;
		pSave->WriteInt( &len );
		pSave->WriteString( pActivityName );
	}

	virtual void Restore( const SaveRestoreFieldInfo_t &fieldInfo, IRestore *pRestore ) 
	{
		char nameBuf[1024];

		int *pActivityIndex = (int *)fieldInfo.pField;

		int nameLen = pRestore->ReadInt();
		if ( (nameLen & 0xFFFF0000) != ACTIVITY_FILE_TAG )
		{
			// old save file, this is an index, not a name
			*pActivityIndex = nameLen;
			return;
		}
		nameLen &= 0xFFFF;
		pRestore->ReadString( nameBuf, sizeof(nameBuf), nameLen );
		*pActivityIndex = ActivityList_IndexForName( nameBuf );
		if ( *pActivityIndex < 0 )
		{
			*pActivityIndex = 0;
		}
	}

	virtual bool IsEmpty( const SaveRestoreFieldInfo_t &fieldInfo ) 
	{ 
		int *pActivityIndex = (int *)fieldInfo.pField;
		return (*pActivityIndex == 0);
	}

	virtual void MakeEmpty( const SaveRestoreFieldInfo_t &fieldInfo ) 
	{
		int *pActivityIndex = (int *)fieldInfo.pField;
		*pActivityIndex = 0;
	}
};

static CActivityDataOps g_ActivityDataOps;

ISaveRestoreOps* ActivityDataOps()
{
	return &g_ActivityDataOps;
}
