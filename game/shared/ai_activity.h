//========= Copyright Valve Corporation, All rights reserved. ============//
//
// Purpose: 
//
// $NoKeywords: $
//=============================================================================//

#ifndef AI_ACTIVITY_H
#define AI_ACTIVITY_H

#ifdef _WIN32
#pragma once
#endif

#define ACTIVITY_NOT_AVAILABLE		-1

typedef enum
{
	ACT_INVALID = -1,			// So we have something more succint to check for than '-1'
	ACT_RESET = 0,				// Set m_Activity to this invalid value to force a reset to m_IdealActivity
	ACT_IDLE,
	ACT_TRANSITION,
	ACT_COVER,					// FIXME: obsolete? redundant with ACT_COVER_LOW?
	ACT_COVER_MED,				// FIXME: unsupported?
	ACT_COVER_LOW,				// FIXME: rename ACT_IDLE_CROUCH?
	ACT_WALK,
	ACT_WALK_AIM,
	ACT_WALK_CROUCH,
	ACT_WALK_CROUCH_AIM,
	ACT_RUN,
	ACT_RUN_AIM,
	ACT_RUN_CROUCH,
	ACT_RUN_CROUCH_AIM,
	ACT_RUN_PROTECTED,
	ACT_SCRIPT_CUSTOM_MOVE,
	ACT_RANGE_ATTACK1,
	ACT_RANGE_ATTACK2,
	ACT_RANGE_ATTACK1_LOW,		// FIXME: not used yet, crouched versions of the range attack
	ACT_RANGE_ATTACK2_LOW,		// FIXME: not used yet, crouched versions of the range attack
	ACT_DIESIMPLE,
	ACT_DIEBACKWARD,
	ACT_DIEFORWARD,
	ACT_DIEVIOLENT,
	ACT_DIERAGDOLL,
	ACT_FLY,				// Fly (and flap if appropriate)
	ACT_HOVER,
	ACT_GLIDE,
	ACT_SWIM,
	ACT_JUMP,
	ACT_HOP,				// vertical jump
	ACT_LEAP,				// long forward jump
	ACT_LAND,
	ACT_CLIMB_UP,
	ACT_CLIMB_DOWN,
	ACT_CLIMB_DISMOUNT,
	ACT_SHIPLADDER_UP,
	ACT_SHIPLADDER_DOWN,
	ACT_STRAFE_LEFT,
	ACT_STRAFE_RIGHT,
	ACT_ROLL_LEFT,			// tuck and roll, left
	ACT_ROLL_RIGHT,			// tuck and roll, right
	ACT_TURN_LEFT,			// turn quickly left (stationary)
	ACT_TURN_RIGHT,			// turn quickly right (stationary)
	ACT_CROUCH,				// FIXME: obsolete? only used be soldier (the act of crouching down from a standing position)
	ACT_CROUCHIDLE,			// FIXME: obsolete? only used be soldier (holding body in crouched position (loops))
	ACT_STAND,				// FIXME: obsolete? should be transition (the act of standing from a crouched position)
	ACT_USE,
	ACT_SIGNAL1,
	ACT_SIGNAL2,
	ACT_SIGNAL3,

	ACT_SIGNAL_ADVANCE,		// Squad handsignals, specific.
	ACT_SIGNAL_FORWARD,
	ACT_SIGNAL_GROUP,
	ACT_SIGNAL_HALT,
	ACT_SIGNAL_LEFT,
	ACT_SIGNAL_RIGHT,
	ACT_SIGNAL_TAKECOVER,

	ACT_LOOKBACK_RIGHT,		// look back over shoulder without turning around.
	ACT_LOOKBACK_LEFT,
	ACT_COWER,				// FIXME: unused, should be more extreme version of crouching
	ACT_SMALL_FLINCH,		// FIXME: needed? shouldn't flinching be down with overlays?
	ACT_BIG_FLINCH,
	ACT_MELEE_ATTACK1,
	ACT_MELEE_ATTACK2,
	ACT_RELOAD,
	ACT_RELOAD_LOW,
	ACT_ARM,				// pull out gun, for instance
	ACT_DISARM,				// reholster gun
	ACT_PICKUP_GROUND,		// pick up something in front of you on the ground
	ACT_PICKUP_RACK,		// pick up something from a rack or shelf in front of you.
	ACT_IDLE_ANGRY,			// FIXME: being used as an combat ready idle?  alternate idle animation in which the monster is clearly agitated. (loop)

	ACT_IDLE_RELAXED,
	ACT_IDLE_STIMULATED,
	ACT_IDLE_AGITATED,

	ACT_WALK_RELAXED,
	ACT_WALK_STIMULATED,
	ACT_WALK_AGITATED,

	ACT_RUN_RELAXED,
	ACT_RUN_STIMULATED,
	ACT_RUN_AGITATED,

	ACT_IDLE_AIM_RELAXED,
	ACT_IDLE_AIM_STIMULATED,
	ACT_IDLE_AIM_AGITATED,

	ACT_WALK_AIM_RELAXED,
	ACT_WALK_AIM_STIMULATED,
	ACT_WALK_AIM_AGITATED,

	ACT_RUN_AIM_RELAXED,
	ACT_RUN_AIM_STIMULATED,
	ACT_RUN_AIM_AGITATED,

	ACT_WALK_HURT,			// limp  (loop)
	ACT_RUN_HURT,			// limp  (loop)
	ACT_SPECIAL_ATTACK1,	// very monster specific special attacks.
	ACT_SPECIAL_ATTACK2,
	ACT_COMBAT_IDLE,		// FIXME: unused?  agitated idle.
	ACT_WALK_SCARED,
	ACT_RUN_SCARED,
	ACT_VICTORY_DANCE,		// killed a player, do a victory dance.
	ACT_DIE_HEADSHOT,		// die, hit in head. 
	ACT_DIE_CHESTSHOT,		// die, hit in chest
	ACT_DIE_GUTSHOT,		// die, hit in gut
	ACT_DIE_BACKSHOT,		// die, hit in back
	ACT_FLINCH_HEAD,
	ACT_FLINCH_CHEST,
	ACT_FLINCH_STOMACH,
	ACT_FLINCH_LEFTARM,
	ACT_FLINCH_RIGHTARM,
	ACT_FLINCH_LEFTLEG,
	ACT_FLINCH_RIGHTLEG,
	ACT_FLINCH_PHYSICS,

	ACT_IDLE_ON_FIRE,		// ON FIRE animations
	ACT_WALK_ON_FIRE,
	ACT_RUN_ON_FIRE,

	ACT_RAPPEL_LOOP,		// Rappel down a rope!

	ACT_180_LEFT,			// 180 degree left turn
	ACT_180_RIGHT,

	ACT_90_LEFT,			// 90 degree turns
	ACT_90_RIGHT,

	ACT_STEP_LEFT,			// Single steps
	ACT_STEP_RIGHT,
	ACT_STEP_BACK,
	ACT_STEP_FORE,

	ACT_GESTURE_RANGE_ATTACK1,
	ACT_GESTURE_RANGE_ATTACK2,
	ACT_GESTURE_MELEE_ATTACK1,
	ACT_GESTURE_MELEE_ATTACK2,
	ACT_GESTURE_RANGE_ATTACK1_LOW,	// FIXME: not used yet, crouched versions of the range attack
	ACT_GESTURE_RANGE_ATTACK2_LOW,	// FIXME: not used yet, crouched versions of the range attack

	ACT_MELEE_ATTACK_SWING_GESTURE,

	ACT_GESTURE_SMALL_FLINCH,
	ACT_GESTURE_BIG_FLINCH,
	ACT_GESTURE_FLINCH_BLAST,
	ACT_GESTURE_FLINCH_HEAD,
	ACT_GESTURE_FLINCH_CHEST,
	ACT_GESTURE_FLINCH_STOMACH,
	ACT_GESTURE_FLINCH_LEFTARM,
	ACT_GESTURE_FLINCH_RIGHTARM,
	ACT_GESTURE_FLINCH_LEFTLEG,
	ACT_GESTURE_FLINCH_RIGHTLEG,

	ACT_GESTURE_TURN_LEFT,
	ACT_GESTURE_TURN_RIGHT,
	ACT_GESTURE_TURN_LEFT45,
	ACT_GESTURE_TURN_RIGHT45,
	ACT_GESTURE_TURN_LEFT90,
	ACT_GESTURE_TURN_RIGHT90,
	ACT_GESTURE_TURN_LEFT45_FLAT,
	ACT_GESTURE_TURN_RIGHT45_FLAT,
	ACT_GESTURE_TURN_LEFT90_FLAT,
	ACT_GESTURE_TURN_RIGHT90_FLAT,

	// Sometimes, you just want to set an NPC's sequence to a sequence that doesn't actually
	// have an activity. The AI will reset the NPC's sequence to whatever its IDEAL activity
	// is, though. So if you set ideal activity to DO_NOT_DISTURB, the AI will not interfere
	// with the NPC's current sequence. (SJB)
	ACT_DO_NOT_DISTURB,

	// viewmodel (weapon) activities
	// FIXME: move these to the specific viewmodels, no need to make global
	ACT_VM_DRAW,
	ACT_VM_HOLSTER,
	ACT_VM_IDLE,
	ACT_VM_FIDGET,
	ACT_VM_PULLBACK,
	ACT_VM_PULLBACK_HIGH,
	ACT_VM_PULLBACK_LOW,
	ACT_VM_THROW,
	ACT_VM_PULLPIN,
	ACT_VM_PRIMARYATTACK,		// fire
	ACT_VM_SECONDARYATTACK,		// alt. fire
	ACT_VM_RELOAD,
	ACT_VM_DRYFIRE,				// fire with no ammo loaded.
	ACT_VM_HITLEFT,				// bludgeon, swing to left - hit (primary attk)
	ACT_VM_HITLEFT2,			// bludgeon, swing to left - hit (secondary attk)
	ACT_VM_HITRIGHT,			// bludgeon, swing to right - hit (primary attk)
	ACT_VM_HITRIGHT2,			// bludgeon, swing to right - hit (secondary attk)
	ACT_VM_HITCENTER,			// bludgeon, swing center - hit (primary attk)
	ACT_VM_HITCENTER2,			// bludgeon, swing center - hit (secondary attk)
	ACT_VM_MISSLEFT,			// bludgeon, swing to left - miss (primary attk)
	ACT_VM_MISSLEFT2,			// bludgeon, swing to left - miss (secondary attk)
	ACT_VM_MISSRIGHT,			// bludgeon, swing to right - miss (primary attk)
	ACT_VM_MISSRIGHT2,			// bludgeon, swing to right - miss (secondary attk)
	ACT_VM_MISSCENTER,			// bludgeon, swing center - miss (primary attk)
	ACT_VM_MISSCENTER2,			// bludgeon, swing center - miss (secondary attk)
	ACT_VM_HAULBACK,			// bludgeon, haul the weapon back for a hard strike (secondary attk)
	ACT_VM_SWINGHARD,			// bludgeon, release the hard strike (secondary attk)
	ACT_VM_SWINGMISS,
	ACT_VM_SWINGHIT,
	ACT_VM_IDLE_TO_LOWERED,
	ACT_VM_IDLE_LOWERED,
	ACT_VM_LOWERED_TO_IDLE,
	ACT_VM_RECOIL1,
	ACT_VM_RECOIL2,
	ACT_VM_RECOIL3,

	//===========================
	// Misc Specific Activities
	//===========================
	ACT_RUNTOIDLE,

	ACT_PHYSCANNON_DETACH,
	ACT_PHYSCANNON_ANIMATE,
	ACT_PHYSCANNON_ANIMATE_PRE,
	ACT_PHYSCANNON_ANIMATE_POST,

	//===========================
	// INS Specific Activities
	//===========================
	ACT_VM_FIREMODE,
	ACT_VM_IFIREMODE,
	ACT_VM_DFIREMODE,
	ACT_VM_DIFIREMODE,
	ACT_VM_DRAW_EMPTY,
	ACT_VM_IDLE_EMPTY,
	ACT_VM_RELOAD_EMPTY,
	ACT_VM_TIRED,
	ACT_VM_TIRED_EMPTY,
	ACT_VM_DOWN,
	ACT_VM_DOWN_EMPTY,
	ACT_VM_CRAWL,
	ACT_VM_CRAWL_EMPTY,
	ACT_VM_IIN,
	ACT_VM_IOUT,
	ACT_VM_IIN_EMPTY,
	ACT_VM_IOUT_EMPTY,
	ACT_VM_ISHOOT,
	ACT_VM_IIDLE,
	ACT_VM_IRECOIL1,
	ACT_VM_IRECOIL2,
	ACT_VM_RELOADEMPTY,
	ACT_VM_DEPLOYED_IRON_IDLE,
	ACT_VM_DEPLOYED_LIFTED_IDLE,
	ACT_VM_DEPLOYED_IDLE,
	ACT_VM_DEPLOYED_IN,
	ACT_VM_DEPLOYED_OUT,
	ACT_VM_DEPLOYED_IRON_IN,
	ACT_VM_DEPLOYED_IRON_OUT,
	ACT_VM_DEPLOYED_FIRE,
	ACT_VM_DEPLOYED_IRON_FIRE,
	ACT_VM_SHOOTLAST,
	ACT_VM_ISHOOT_LAST,
	ACT_VM_ISHOOT_DRY,
	ACT_VM_ISHOOTDRY,
	ACT_VM_READY,
	ACT_VM_HOLSTER_EMPTY,
	ACT_VM_IIDLE_EMPTY,
	ACT_VM_ROF_UP,
	ACT_VM_ROF_DOWN,
	ACT_VM_DEPLOYED_RELOAD,
	ACT_VM_DEPLOYED_RELOAD_EMPTY,
	ACT_VM_DEPLOYED_DRYFIRE,
	ACT_VM_DEPLOYED_IRON_DRYFIRE,
	ACT_VM_RELOAD_INSERT,
	ACT_VM_RELOAD_INSERT_PULL,
	ACT_VM_RELOAD_END,
	ACT_VM_RELOAD_END_EMPTY,
	ACT_VM_PULLBACK_HIGH_BAKE,

	ACT_VM_DRAW_M203,
	ACT_VM_DRAWFULL_M203,
	ACT_VM_READY_M203,
	ACT_VM_IDLE_M203,
	ACT_VM_DOWN_M203,
	ACT_VM_CRAWL_M203,
	ACT_VM_RELOAD_M203,
	ACT_VM_HOLSTER_M203,
	ACT_VM_HOLSTERFULL_M203,
	ACT_VM_IIN_M203,
	ACT_VM_IIDLE_M203,
	ACT_VM_IOUT_M203,
	ACT_VM_ISHOOT_M203,

	ACT_TURN,

	ACT_INS_STAND,
	ACT_INS_STAND_AIM,
	ACT_INS_STAND_WALK,
	ACT_INS_STAND_RUN,
	ACT_INS_STAND_DEPLOY,
	ACT_INS_STAND_LEANR,
	ACT_INS_STAND_LEANL,
	ACT_INS_SPRINT,
	ACT_INS_CROUCH,
	ACT_INS_CROUCH_AIM,
	ACT_INS_CROUCH_WALK,
	ACT_INS_CROUCH_RUN,
	ACT_INS_CROUCH_DEPLOY,
	ACT_INS_CROUCH_LEANR,
	ACT_INS_CROUCH_LEANL,
	ACT_INS_PRONE,
	ACT_INS_PRONE_DEPLOY,
	ACT_INS_CRAWL,
	ACT_INS_JUMP,

	ACT_TRANS_STAND_CROUCH,
	ACT_TRANS_STAND_PRONE,
	ACT_TRANS_CROUCH_STAND,
	ACT_TRANS_CROUCH_PRONE,
	ACT_TRANS_PRONE_STAND,
	ACT_TRANS_PRONE_CROUCH,

	// weapon specific activities: pistol
	ACT_INS_STAND_PISTOL,
	ACT_INS_STAND_AIM_PISTOL,
	ACT_INS_STAND_WALK_PISTOL,
	ACT_INS_STAND_RUN_PISTOL,
	ACT_INS_STAND_LEANR_PISTOL,
	ACT_INS_STAND_LEANL_PISTOL,
	ACT_INS_SPRINT_PISTOL,
	ACT_INS_CROUCH_PISTOL,
	ACT_INS_CROUCH_AIM_PISTOL,
	ACT_INS_CROUCH_WALK_PISTOL,
	ACT_INS_CROUCH_RUN_PISTOL,
	ACT_INS_PRONE_PISTOL,
	ACT_INS_CRAWL_PISTOL,
	ACT_INS_JUMP_PISTOL,

	// weapon specific activities: knife
	ACT_INS_STAND_KNIFE,
	ACT_INS_STAND_WALK_KNIFE,
	ACT_INS_STAND_RUN_KNIFE,
	ACT_INS_SPRINT_KNIFE,
	ACT_INS_CROUCH_KNIFE,
	ACT_INS_CROUCH_WALK_KNIFE,
	ACT_INS_CROUCH_RUN_KNIFE,
	ACT_INS_PRONE_KNIFE,
	ACT_INS_CRAWL_KNIFE,
	ACT_INS_JUMP_KNIFE,

	// weapon specific activities: grenade
	ACT_INS_STAND_GRENADE,
	ACT_INS_STAND_WALK_GRENADE,
	ACT_INS_STAND_RUN_GRENADE,
	ACT_INS_SPRINT_GRENADE,
	ACT_INS_CROUCH_GRENADE,
	ACT_INS_CROUCH_WALK_GRENADE,
	ACT_INS_CROUCH_RUN_GRENADE,
	ACT_INS_PRONE_GRENADE,
	ACT_INS_CRAWL_GRENADE,
	ACT_INS_JUMP_GRENADE,

	// weapon specific activities: M16
	ACT_INS_STAND_M16,
	ACT_INS_STAND_AIM_M16,
	ACT_INS_STAND_WALK_M16,
	ACT_INS_STAND_RUN_M16,
	ACT_INS_STAND_DEPLOY_M16,
	ACT_INS_STAND_LEANR_M16,
	ACT_INS_STAND_LEANL_M16,
	ACT_INS_SPRINT_M16,
	ACT_INS_CROUCH_M16,
	ACT_INS_CROUCH_AIM_M16,
	ACT_INS_CROUCH_WALK_M16,
	ACT_INS_CROUCH_RUN_M16,
	ACT_INS_CROUCH_DEPLOY_M16,
	ACT_INS_PRONE_M16,
	ACT_INS_PRONE_DEPLOY_M16,
	ACT_INS_CRAWL_M16,
	ACT_INS_JUMP_M16,

	// weapon specific activities: M249
	ACT_INS_STAND_M249,
	ACT_INS_STAND_AIM_M249,
	ACT_INS_STAND_WALK_M249,
	ACT_INS_STAND_RUN_M249,
	ACT_INS_STAND_DEPLOY_M249,
	ACT_INS_STAND_LEANR_M249,
	ACT_INS_STAND_LEANL_M249,
	ACT_INS_SPRINT_M249,
	ACT_INS_CROUCH_M249,
	ACT_INS_CROUCH_AIM_M249,
	ACT_INS_CROUCH_WALK_M249,
	ACT_INS_CROUCH_RUN_M249,
	ACT_INS_CROUCH_DEPLOY_M249,
	ACT_INS_PRONE_M249,
	ACT_INS_PRONE_DEPLOY_M249,
	ACT_INS_CRAWL_M249,
	ACT_INS_JUMP_M249,

	// weapon specific activities: RPK
	ACT_INS_STAND_RPK,
	ACT_INS_STAND_AIM_RPK,
	ACT_INS_STAND_WALK_RPK,
	ACT_INS_STAND_RUN_RPK,
	ACT_INS_STAND_DEPLOY_RPK,
	ACT_INS_STAND_LEANR_RPK,
	ACT_INS_STAND_LEANL_RPK,
	ACT_INS_SPRINT_RPK,
	ACT_INS_CROUCH_RPK,
	ACT_INS_CROUCH_AIM_RPK,
	ACT_INS_CROUCH_WALK_RPK,
	ACT_INS_CROUCH_RUN_RPK,
	ACT_INS_CROUCH_DEPLOY_RPK,
	ACT_INS_PRONE_RPK,
	ACT_INS_PRONE_DEPLOY_RPK,
	ACT_INS_CRAWL_RPK,
	ACT_INS_JUMP_RPK,

	// weapon specific activities: SKS
	ACT_INS_STAND_SKS,
	ACT_INS_STAND_AIM_SKS,
	ACT_INS_STAND_WALK_SKS,
	ACT_INS_STAND_RUN_SKS,
	ACT_INS_STAND_DEPLOY_SKS,
	ACT_INS_STAND_LEANR_SKS,
	ACT_INS_STAND_LEANL_SKS,
	ACT_INS_SPRINT_SKS,
	ACT_INS_CROUCH_SKS,
	ACT_INS_CROUCH_AIM_SKS,
	ACT_INS_CROUCH_WALK_SKS,
	ACT_INS_CROUCH_RUN_SKS,
	ACT_INS_CROUCH_DEPLOY_SKS,
	ACT_INS_PRONE_SKS,
	ACT_INS_PRONE_DEPLOY_SKS,
	ACT_INS_CRAWL_SKS,
	ACT_INS_JUMP_SKS,

	// weapon specific activities: AK47
	ACT_INS_STAND_AK47,
	ACT_INS_STAND_AIM_AK47,
	ACT_INS_STAND_WALK_AK47,
	ACT_INS_STAND_RUN_AK47,
	ACT_INS_STAND_DEPLOY_AK47,
	ACT_INS_STAND_LEANR_AK47,
	ACT_INS_STAND_LEANL_AK47,
	ACT_INS_SPRINT_AK47,
	ACT_INS_CROUCH_AK47,
	ACT_INS_CROUCH_AIM_AK47,
	ACT_INS_CROUCH_WALK_AK47,
	ACT_INS_CROUCH_RUN_AK47,
	ACT_INS_CROUCH_DEPLOY_AK47,
	ACT_INS_PRONE_AK47,
	ACT_INS_PRONE_DEPLOY_AK47,
	ACT_INS_CRAWL_AK47,
	ACT_INS_JUMP_AK47,

	// weapon specific activities: shotgun
	ACT_INS_STAND_SHOTGUN,
	ACT_INS_STAND_AIM_SHOTGUN,
	ACT_INS_STAND_WALK_SHOTGUN,
	ACT_INS_STAND_RUN_SHOTGUN,
	ACT_INS_STAND_LEANR_SHOTGUN,
	ACT_INS_STAND_LEANL_SHOTGUN,
	ACT_INS_SPRINT_SHOTGUN,
	ACT_INS_CROUCH_SHOTGUN,
	ACT_INS_CROUCH_AIM_SHOTGUN,
	ACT_INS_CROUCH_WALK_SHOTGUN,
	ACT_INS_CROUCH_RUN_SHOTGUN,
	ACT_INS_PRONE_SHOTGUN,
	ACT_INS_CRAWL_SHOTGUN,
	ACT_INS_JUMP_SHOTGUN,

	// weapon specific activities: rpg
	ACT_RANGE_ATTACK_RPG,
	ACT_IDLE_RPG_RELAXED,
	ACT_IDLE_ANGRY_RPG,
	ACT_IDLE_RPG,
	ACT_WALK_RPG,
	ACT_WALK_CROUCH_RPG,
	ACT_RUN_RPG,
	ACT_SPRINT_RPG,
	ACT_RUN_CROUCH_RPG,
	ACT_COVER_LOW_RPG,

	// this is the end of the global activities, private per-monster activities start here.
	LAST_SHARED_ACTIVITY,
} Activity;

void CreateAIActivityList();
void DeleteAIActivityList();

const char* GetActivityName(int actID);
int GetActivityID(const char* actName);

#endif // AI_ACTIVITY_H